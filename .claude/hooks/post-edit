#!/bin/bash
# Post-edit hook - runs formatting after editing files

set -e

file="$1"

# Function to check if file is a shell script
is_shell_script() {
	local file="$1"
	# Check by directory location
	if [[ "$file" == */bin/* ]] || [[ "$file" == */scripts/* ]] || [[ "$file" == */.claude/hooks/* ]]; then
		return 0
	fi
	# Check by shebang
	if [[ -f "$file" ]] && head -1 "$file" 2>/dev/null | rg -q '^#!/.*sh'; then
		return 0
	fi
	return 1
}

# Nix files
if [[ "$file" == *.nix ]]; then
	echo "üîß Auto-formatting Nix file with nixfmt..."

	# Format with nixfmt
	if command -v nixfmt >/dev/null 2>&1; then
		nixfmt "$file"
		echo "‚úÖ Formatted $file"
	else
		echo "‚ö†Ô∏è  nixfmt not found in PATH"
	fi

# Markdown files
elif [[ "$file" == *.md ]]; then
	echo "üìù Auto-formatting Markdown file..."

	# Try markdownlint --fix first, fallback to prettier
	if command -v markdownlint >/dev/null 2>&1; then
		markdownlint --fix "$file" 2>/dev/null || true
		echo "‚úÖ Formatted $file with markdownlint"
	elif command -v prettier >/dev/null 2>&1; then
		prettier --write "$file"
		echo "‚úÖ Formatted $file with prettier"
	else
		echo "‚ö†Ô∏è  No markdown formatter found (markdownlint or prettier)"
	fi

# Shell scripts
elif is_shell_script "$file"; then
	echo "üêö Auto-formatting shell script..."

	# Format with shfmt
	if command -v shfmt >/dev/null 2>&1; then
		shfmt -w "$file"
		echo "‚úÖ Formatted $file with shfmt"
	else
		echo "‚ö†Ô∏è  shfmt not found in PATH"
	fi

	# Harden with shellharden
	if command -v shellharden >/dev/null 2>&1; then
		shellharden --replace "$file"
		echo "‚úÖ Hardened $file with shellharden"
	else
		echo "‚ö†Ô∏è  shellharden not found in PATH"
	fi
fi
